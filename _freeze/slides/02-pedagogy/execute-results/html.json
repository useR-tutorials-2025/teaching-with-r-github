{
  "hash": "af1ef7a879f9feeac3e54ff4db08f05b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Curriculum and Pedagogy\"\nsubtitle: \"useR 2025\"\nauthor: \"Elijah Meyer & Maria Tackett\"\nfooter: \"[Teaching with R and GitHub](https://user-tutorials-2025.github.io/teaching-with-r-github/)\"\nformat: \n  revealjs:\n    theme: slides.scss\n    transition: fade\n    slide-number: true\n    incremental: false \n    chalkboard: true\n    fig-dpi: 300\nimage: \"images/tidyverse.png\"\nexecute:\n  freeze: auto\n  echo: true\nknitr:\n  opts_chunk: \n    R.options:\n      width: 200\nfilters: \n  - webr\nwebr:\n  show-startup-message: false \n  packages: ['tidyverse', 'palmerpenguins']\n---\n\n\n# Curriculum\n\n\n\n\n\n```{webr-r}\n#| context: setup\n\n#remove 2 penguins with no measurements\n\npenguins <- penguins |> \n  filter(!is.na(flipper_length_mm))\n```\n\n## Curriculum guidelines {.midi}\n\n::: incremental\n-   Use technology to explore concepts and analyze data. ([GAISE, 2016](https://www.amstat.org/docs/default-source/amstat-documents/gaisecollege_full.pdf))\n\n-   Incorporate software/apps to explore concepts and work with data. ([GAISE revision, in progress](https://community.amstat.org/collegegaiserevision/home))\n\n-   All programs should (a) expose students to technology tools for reproducibility, collaboration, database query, data acquisition, data curation, and data storage; (b) require students to develop fluency in at least one programming language used in data science and encourage learning a second language. ([Two-Year College Data Science Summit, 2018](https://www.amstat.org/education/two-year-college-data-science-summit))\n\n-   The two pillars of computational and statistical thinking should not be taught separately...both should be present for the most effective and efficient teaching. ([Curriculum Guidelines for Undergraduate Programs in Data Science, 2014)](https://www.annualreviews.org/content/journals/10.1146/annurev-statistics-060116-053930)\n:::\n\n## Intro Data Science\n\n![](images/ds-topic-flow.png){fig-align=\"center\" width=\"70%\"}\n\n::: small\nImage from [Data Science in a Box](https://datasciencebox.org/01-topics)\n:::\n\n## Intro Data Science topics {.midi}\n\n::: columns\n::: {.column width=\"50%\"}\n**Unit 1: Exploring data**\n\n-   Data visualization \n-   Exploring multivariable relationships\n-   Data wrangling\n-   Importing data \n:::\n\n::: {.column width=\"50%\"}\n**Unit 2: Making rigorous conclusions**\n\n-   Relationships between multiple variables\n-   Predicting numeric and binary outcomes\n-   Model building and feature engineering\n-   Model evaluation and cross validation \n-   Simulation-based inference\n:::\n:::\n\n::: aside\nSource: Çetinkaya-Rundel & Ellison (2020)\n:::\n\n## Intro Data Science topics {.midi}\n\n::: columns\n::: {.column width=\"50%\"}\n**Additional topics (varies by instructor)**\n\n-   Interactive dashboards with Shiny\n-   Working productively with AI tools  \n-   Text analysis\n-   Customizing Quarto reports and presentations\n:::\n\n::: {.column width=\"50%\"}\n::: highlight\n**Computing throughout course**\n\n-   Statistical analysis using R\n-   Reproducible reports using Quarto\n-   Version control and collaboration using git and GitHub\n:::\n:::\n:::\n\n<br>\n\n::: aside\nSource: Çetinkaya-Rundel & Ellison (2020)\n:::\n\n## Computing as a learning objective\n\n::: highlight\n\"The goal of teaching computing and information technologies is to remove obstacles to engagement with a problem.\"\n\n(Nolan & Temple Lang, 2010)\n:::\n\n. . .\n\n::: incremental\n-   Students gain experience using professional computing tools\n\n-   Students develop reproducible workflow while learning statistical methods\n\n-   Students gain experience working with more complex and realistic data\n\n-   Students develop computational thinking and build confidence to handle computational challenges\n:::\n\n# Pedagogy\n\n## Pedagogy\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/sta199-pedagogy.png){fig-align=\"center\" width=\"60%\"}\n:::\n\n::: {.column width=\"50%\"}\n::: midi\n-   **Build**: Introduce new content\n\n-   **Train**: Put concepts into practice through hands-on class activities\n\n    -   **Do**: Steps needed to accomplish a task\n\n    -   **Think**: How to accomplish task in future\n\n-   **Create:** Demonstrate learning through a variety of assessments\n:::\n:::\n:::\n\n::: small\nSource: Meyer and Çetinkaya-Rundel (2025, preprint)\n:::\n\n## Tidyverse\n\n::: columns\n::: {.column width=\"50%\"}\n*The tidyverse is an opinionated [**collection of R packages**](https://www.tidyverse.org/packages) designed for data science. All packages share an underlying design philosophy, grammar, and data structures.*\n\n\\-[tidyverse.org](https://tidyverse.org)\n:::\n\n::: {.column width=\"50%\"}\n![](images/tidyverse.png){fig-align=\"center\" width=\"80%\"}\n:::\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n## Tidyverse in data science workflow\n\n![Source: Çetinkaya-Rundel et al. (2022)](images/tidyverse-ds-workflow.png){fig-align=\"center\" width=\"70%\"}\n\n## Pedagogical benefits of the tidyverse {.midi}\n\n::: incremental\n-   **Consistency**: Syntax, function interfaces, argument names and order follow patterns\n\n-   **Mixability**: Ability to use base R and other functions within tidyverse syntax\n\n-   **Scalability**: Unified approach that works for data sets from a wide range of types and sizes\n\n-   **User-centered design**: Function interfaces designed with users in mind\n\n-   **Readability**: Interfaces designed to produce readable code\n\n-   **Community**: Large, active, and welcoming community of users and resources\n\n-   **Transferability**: Data manipulation verbs inherit SQL's query syntax\n:::\n\n::: small\nSource: Çetinkaya-Rundel et al. (2022)\n:::\n\n## Tidy data\n\n1.  Each variable forms a column.\n2.  Each observation forms a row.\n3.  Each type of observational unit forms a table.\n\n. . .\n\n::: columns\n::: {.column width=\"50%\"}\n<center><b>Not tidy data</b></center>\n\n![](images/not-tidy-data.png){alt=\"Tidy data\" fig-align=\"center\" width=\"80%\"}\n:::\n\n::: {.column width=\"50%\"}\n<center><b>Tidy data</b></center>\n\n![](images/tidy-data.png){alt=\"Tidy data\" fig-align=\"center\" width=\"80%\"}\n:::\n:::\n\n::: aside\nSource: Wickham (2014)\n:::\n\n## The pipe\n\nThe **pipe,** `|>`, is used to pass information from one function to another in the tidyverse.\n\n. . .\n\nWhen reading code aloud in English, say \"and then\" whenever you see a pipe. Below is a pipeline for a children's poem.\\*\n\n::: aside\n\\* Source: [R for Data Science 1st Edition](https://r4ds.had.co.nz/pipes.html)\n:::\n\n<br>\n\n. . .\n\n::: columns\n::: {.column width=\"50%\"}\nLittle bunny Foo Foo\\\nWent hopping through the forest\\\nScooping up the field mice\\\nAnd bopping them on the head\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nfoo_foo |>\n  hop(through = forest) |>\n  scoop(up = field_mice) |>\n  bop(on = head)\n```\n:::\n\n:::\n:::\n\n<!--# do bunny foo foo example from Hadley Wickhim-->\n\n## Data: Palmer penguins {.midi}\n\nWe will analyze the `penguins` data set from the [**palmerpenguins** R package](https://allisonhorst.github.io/palmerpenguins/) maintained by Dr. Allison Horst. This data set contains measurements and other characteristics for penguins observed near Palmer Station in Antarctica. The data were originally collected by Dr. Kristen Gorman.\n\nWe will use the following variables:\n\n-   `species`: a factor denoting penguin species (Adélie, Chinstrap and Gentoo)\n-   `flipper_length_mm`: an integer denoting flipper length (millimeters)\n-   `body_mass_g`: an integer denoting body mass (grams)\n\n[Click here](https://allisonhorst.github.io/palmerpenguins/reference/penguins.html) for the full codebook.\n\n## `penguins` data frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\npenguins\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 342 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex     year\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int> <fct>  <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750 male    2007\n 2 Adelie  Torgersen           39.5          17.4               186        3800 female  2007\n 3 Adelie  Torgersen           40.3          18                 195        3250 female  2007\n 4 Adelie  Torgersen           36.7          19.3               193        3450 female  2007\n 5 Adelie  Torgersen           39.3          20.6               190        3650 male    2007\n 6 Adelie  Torgersen           38.9          17.8               181        3625 female  2007\n 7 Adelie  Torgersen           39.2          19.6               195        4675 male    2007\n 8 Adelie  Torgersen           34.1          18.1               193        3475 <NA>    2007\n 9 Adelie  Torgersen           42            20.2               190        4250 <NA>    2007\n10 Adelie  Torgersen           37.8          17.1               186        3300 <NA>    2007\n# ℹ 332 more rows\n```\n\n\n:::\n:::\n\n\n## Base R: Compute summary statistics\n\n::: question\nCompute the mean flipper length for Palmer penguins.\n:::\n\n<br>\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(penguins$flipper_length_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 200.9152\n```\n\n\n:::\n:::\n\n\n::: aside\nExample inspired by Çetinkaya-Rundel et al. (2022)\n:::\n\n## Base R: Compute summary statistics {.midi}\n\n::: question\nFor each species, compute the number of penguins and the mean flipper length. Display the results in descending order by number of penguins.\n:::\n\n<br>\n\n. . .\n\n**Compute number of penguins by species**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_penguins <- aggregate(flipper_length_mm ~ species, data = penguins, FUN = length)\nnames(num_penguins)[2] <- \"num_penguins\"\n```\n:::\n\n\n. . .\n\n**Compute mean flipper length by species**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_flipper <- aggregate(flipper_length_mm ~ species, data = penguins, FUN = mean)\nnames(mean_flipper)[2] <- \"mean_flipper_length\"\n```\n:::\n\n\n::: aside\nExample inspired by Çetinkaya-Rundel et al. (2022)\n:::\n\n## Base R: Compute summary statistics {.midi}\n\n::: question\nFor each species, compute the number of penguins and the mean flipper length. Display the results in descending order by number of penguins.\n:::\n\n<br>\n\n**Combine results and sort data frame**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- merge(num_penguins, mean_flipper)\ndf[order(df$num_penguins, decreasing = TRUE), ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    species num_penguins mean_flipper_length\n1    Adelie          151            189.9536\n3    Gentoo          123            217.1870\n2 Chinstrap           68            195.8235\n```\n\n\n:::\n:::\n\n\n::: aside\nExample inspired by Çetinkaya-Rundel et al. (2022)\n:::\n\n## Base R: Full code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_penguins <- aggregate(flipper_length_mm ~ species, data = penguins, FUN = length)\nnames(num_penguins)[2] <- \"num_penguins\"\n\nmean_flipper <- aggregate(flipper_length_mm ~ species, data = penguins, FUN = mean)\nnames(mean_flipper)[2] <- \"mean_flipper_length\"\n\ndf <- merge(num_penguins, mean_flipper)\ndf[order(df$num_penguins, decreasing = TRUE), ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    species num_penguins mean_flipper_length\n1    Adelie          151            189.9536\n3    Gentoo          123            217.1870\n2 Chinstrap           68            195.8235\n```\n\n\n:::\n:::\n\n\n<br>\n\n::: aside\nExample inspired by Çetinkaya-Rundel et al. (2022)\n:::\n\n## Your turn! {.midi}\n\n::: question\nUse tidyverse syntax to make the data frame described below:\n\nFor each species, compute the number of penguins and the mean flipper length. Display the results in descending order by number of penguins.\n:::\n\n```{webr-r}\npenguins\n# add code here\n```\n\n<br>\n\n::: callout-tip\nSee [dplyr reference](https://dplyr.tidyverse.org/reference/index.html#data-frame-verbs) for list of functions.\n:::\n\n## Closer look at the code\n\n::: columns\n::: {.column width=\"40%\"}\nFor each species, compute the number of penguins and the mean flipper length. Display the results in descending order by number of penguins.\n:::\n\n::: {.column width=\"60%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 342 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex     year\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int> <fct>  <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750 male    2007\n 2 Adelie  Torgersen           39.5          17.4               186        3800 female  2007\n 3 Adelie  Torgersen           40.3          18                 195        3250 female  2007\n 4 Adelie  Torgersen           36.7          19.3               193        3450 female  2007\n 5 Adelie  Torgersen           39.3          20.6               190        3650 male    2007\n 6 Adelie  Torgersen           38.9          17.8               181        3625 female  2007\n 7 Adelie  Torgersen           39.2          19.6               195        4675 male    2007\n 8 Adelie  Torgersen           34.1          18.1               193        3475 <NA>    2007\n 9 Adelie  Torgersen           42            20.2               190        4250 <NA>    2007\n10 Adelie  Torgersen           37.8          17.1               186        3300 <NA>    2007\n# ℹ 332 more rows\n```\n\n\n:::\n:::\n\n:::\n:::\n\n::: aside\nExample inspired by Çetinkaya-Rundel et al. (2022)\n:::\n\n## Closer look at the code\n\n::: columns\n::: {.column width=\"40%\"}\n[For each species]{style=\"font-weight:bold;background-color:#ccddeb;\"}, compute the number of penguins and the mean flipper length. Display the results in descending order by number of penguins.\n:::\n\n::: {.column width=\"60%\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\npenguins |>\n  group_by(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 342 × 8\n# Groups:   species [3]\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex     year\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int> <fct>  <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750 male    2007\n 2 Adelie  Torgersen           39.5          17.4               186        3800 female  2007\n 3 Adelie  Torgersen           40.3          18                 195        3250 female  2007\n 4 Adelie  Torgersen           36.7          19.3               193        3450 female  2007\n 5 Adelie  Torgersen           39.3          20.6               190        3650 male    2007\n 6 Adelie  Torgersen           38.9          17.8               181        3625 female  2007\n 7 Adelie  Torgersen           39.2          19.6               195        4675 male    2007\n 8 Adelie  Torgersen           34.1          18.1               193        3475 <NA>    2007\n 9 Adelie  Torgersen           42            20.2               190        4250 <NA>    2007\n10 Adelie  Torgersen           37.8          17.1               186        3300 <NA>    2007\n# ℹ 332 more rows\n```\n\n\n:::\n:::\n\n:::\n:::\n\n::: aside\nExample inspired by Çetinkaya-Rundel et al. (2022)\n:::\n\n## Closer look at the code\n\n::: columns\n::: {.column width=\"40%\"}\nFor each species, [compute the number of penguins]{style=\"font-weight:bold;background-color:#ccddeb;\"} and the mean flipper length. Display the results in descending order by number of penguins.\n:::\n\n::: {.column width=\"60%\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3-4\"}\npenguins |>\n  group_by(species) |>\n  summarise(n = n(), \n            )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  species       n\n  <fct>     <int>\n1 Adelie      151\n2 Chinstrap    68\n3 Gentoo      123\n```\n\n\n:::\n:::\n\n:::\n:::\n\n::: aside\nExample inspired by Çetinkaya-Rundel et al. (2022)\n:::\n\n## Closer look at the code\n\n::: columns\n::: {.column width=\"40%\"}\nFor each species, compute the number of penguins and [the mean flipper length]{style=\"font-weight:bold;background-color:#ccddeb;\"}. Display the results in descending order by number of penguins.\n:::\n\n::: {.column width=\"60%\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4-6\"}\npenguins |>\n  group_by(species) |>\n  summarise(n = n(), \n            mean = mean(flipper_length_mm)\n            )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  species       n  mean\n  <fct>     <int> <dbl>\n1 Adelie      151  190.\n2 Chinstrap    68  196.\n3 Gentoo      123  217.\n```\n\n\n:::\n:::\n\n:::\n:::\n\n::: aside\nExample inspired by Çetinkaya-Rundel et al. (2022)\n:::\n\n## Closer look at the code\n\n::: columns\n::: {.column width=\"40%\"}\nFor each species, compute the number of penguins and the mean flipper length. [Display the results in descending order by number of penguins.]{style=\"font-weight:bold;background-color:#ccddeb;\"}\n:::\n\n::: {.column width=\"60%\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"7\"}\npenguins |>\n  group_by(species) |>\n  summarise(n = n(), \n            mean = mean(flipper_length_mm)\n            ) |>\n  arrange(desc(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  species       n  mean\n  <fct>     <int> <dbl>\n1 Adelie      151  190.\n2 Gentoo      123  217.\n3 Chinstrap    68  196.\n```\n\n\n:::\n:::\n\n:::\n:::\n\n::: aside\nExample inspired by Çetinkaya-Rundel et al. (2022)\n:::\n\n## Your turn! \\[Time permitting\\]\n\n::: question\n-   Create a new data frame that only contains the penguin from each species with the largest body mass.\n-   Use [**dplyr**](https://dplyr.tidyverse.org/reference/index.html) functions to continue exploring the `penguins` data set.\n:::\n\n<br>\n\n```{webr-r}\n# add code here\n\n```\n\n------------------------------------------------------------------------\n\n<br>\n\n<br>\n\n<br>\n\n> \"The tidyverse provides an effective and efficient pathway for undergraduate students at all levels and majors to gain computational skills and thinking needed throughout the data science cycle.\"\n>\n> -Çetinkaya-Rundel et al. (2022)\n\n## What about AI? {.midi}\n\n-   We recommend minimal use of generative artificial intelligence (AI) for coding when coding proficiency is a learning objective in an introductory course\n\n-   There are a variety of perspectives on using generative AI tools to teaching coding:\n\n    ::: small\n    -   Bien, J., & Mukherjee, G. (2025). [Generative AI for Data Science 101: Coding Without Learning To Code](https://www.tandfonline.com/doi/full/10.1080/26939169.2024.2432397?src=exp-mr). *Journal of Statistics and Data Science Education*, *33*(2), 129-142.\n\n    -   [Generative AI in Statistics and Data Science Education](https://www.tandfonline.com/journals/ujse21/collections/generative-ai) (Journal of Statistics and Data Science collection)\n\n    -   [Leveraging LLMs for student feedback in introductory data science courses](https://mine-cetinkaya-rundel.github.io/help-from-ai-uscots25/) by Mine Çetinkaya-Rundel (USCOTS presentation)\n\n    -   [Learning the tidyverse with the help of AI tools](https://www.tidyverse.org/blog/2025/04/learn-tidyverse-ai/) by Mine Çetinkaya-Rundel (Tidyverse blog)\n    :::\n\n# Infrastructure\n\n## RStudio in the cloud {.midi}\n\n::: incremental\n-   Removes the most common hurdle to get started with computing - installation and configuration\n    -   Start using R on Day 1!\n-   Actively engage students with all aspects of the course, not just in a computing lab\n-   Install R and RStudio on a server and provide access to students:\n    -   Centralized [RStudio Server / Posit Workbench](https://posit.co/products/enterprise/workbench/)\n    -   Dockerized RStudio Server (what we're using today)\n    -   [Posit Cloud](https://posit.cloud)\n:::\n\n::: aside\nÇetinkaya-Rundel and Rundel (2018)\n:::\n\n## RStudio in a Docker container\n\n-   RStudio in Docker containers built and maintained by Duke Office of Information Technology\n\n-   Customize the pre-installed packages, data sets, etc. for your course\n\n-   Students access their instance of RStudio using institution credentials\n\n## Demo\n\n-   Open RStudio docker container (see email for URL)\n\n-   Click *File* -\\> *New File* -\\> *Quarto Document* to make a new Quarto document\n\n-   Parts of a Quarto document:\n\n    -   YAML\n\n    -   Narrative\n\n    -   Code\n\n-   Use Quarto for reproducible in-class activities and assignments\n\n## Discussion\n\n::: question\n-   What is something you've seen thus far that you find exciting? Want to learn more about? Would like to incorporate in your teaching?\n\n-   Any other questions/ comments/ discussion points?\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}